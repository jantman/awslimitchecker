
.. -- WARNING -- WARNING -- WARNING
   This document is automatically generated by
   awslimitchecker/docs/build_generated_docs.py.
   Please edit that script, or the template it points to.

.. _cli_usage:

Command Line Usage
==================

awslimitchecker ships with a command line script for use outside of
Python environments. ``awslimitchecker`` is installed as a
`setuptools entry point <https://setuptools.readthedocs.io/en/latest/pkg_resources.html#entry-points>`_,
and will be available wherever you install the package (if you install
in a virtual environment as recommended, it will be in the venv's ``bin/`` directory).

The command line script provides simple access to the most common features,
though not full access to all configuration possibilities. In addition, when checking
usage, the script will exit 0 of everything is OK, 1 if there are warnings, and 2 if there
are critical thresholds exceeded (though the output is not currently suitable for direct
use as a Nagios-compatible plugin).

{help}

Examples
--------

In the following examples, **output has been truncated** to simplify documentation.
When running with all services enabled, ``awslimitchecker`` will provide *many* lines
of output. ``(...)`` has been inserted in the output below to denote removed
or truncated lines.

Listing Supported Services
++++++++++++++++++++++++++

View the AWS services currently supported by ``awslimitchecker`` with the
``-s`` or ``--list-services`` option.

{list_services}

Listing Default Limits
++++++++++++++++++++++

To show the hard-coded default limits, ignoring any limit overrides
or Trusted Advisor data, run with ``--list-defaults``:

{list_defaults}

Viewing Limits
++++++++++++++

View the limits that ``awslimitchecker`` currently knows how to check, and what
the limit value is set as (if you specify limit overrides, they will be used
instead of the default limit) by specifying the ``-l`` or ``--list-limits``
option. Limits followed by ``(TA)`` have been obtained from Trusted Advisor
and limits followed by ``(API)`` have been obtained from the service's API.

{list_limits}

Disabling Service Quotas service
++++++++++++++++++++++++++++++++

Using the ``--skip-quotas`` option will disable attempting to query limit information
from the Service Quotas service.

{skip_quotas}

Disabling Trusted Advisor Checks
++++++++++++++++++++++++++++++++

.. attention::
   Trusted Advisor support in awslimitchecker is deprecated outside of the China and GovCloud regions, and now defaults to disabled/skipped in standard AWS, as the information available from TA can now be retrieved faster and more accurately via other means. See :ref:`changelog.10_0_0` for further information.

Using the ``--skip-ta`` option will disable attempting to query limit information
from Trusted Advisor for all commands.

{skip_ta}

Disabling Specific Services
+++++++++++++++++++++++++++

The ``--skip-service`` option can be used to completely disable the specified
service name(s) (as shown by ``-s`` / ``--list-services``) for services that are
problematic or you do not wish to query at all.

For example, you can check usage of all services _except_ for ``Firehose`` and
``EC2``:

.. code-block:: console

   (venv)$ awslimitchecker --skip-service=Firehose --skip-service EC2
    WARNING:awslimitchecker.checker:Skipping service: Firehose
    WARNING:awslimitchecker.checker:Skipping service: EC2
    ... normal output ...

Disabling Specific Checks
+++++++++++++++++++++++++++

The ``--skip-check`` option can be used to completely disable the specified
check name(s).

For example, you can run all the EC2 service checks except the ``Max launch specifications per spot fleet`` check with  the following command:

.. code-block:: console

   (venv)$ awslimitchecker --skip-check='EC2/Max launch specifications per spot fleet'
    ... normal output ...
    EC2/Max launch specifications per spot fleet  (limit 50) WARNING: sfr-98e516f0-62f8-47ad-ada6-444da23fe6c5=42
   (venv)$ echo $?
   2

   # With --skip-check
   (venv)$ awslimitchecker --skip-check='EC2/Max launch specifications per spot fleet'
    ... normal output ...
   (venv)$ echo $?
   0

Checking Usage
++++++++++++++

The ``-u`` or ``--show-usage`` options to ``awslimitchecker`` show the current
usage for each limit that ``awslimitchecker`` knows about. It will connect to the
AWS API and determine the current usage for each limit. In cases where limits are
per-resource instead of account-wide (i.e. "Rules per VPC security group" or
"Security groups per VPC"), the usage will be reported for each possible resource
in ``resource_id=value`` format (i.e. for each VPC security group and each VPC, respectively,
using their IDs).

{show_usage}

.. _cli_usage.limit_overrides:

Overriding Limits
+++++++++++++++++

In cases where you've been given a limit increase by AWS Support, you can override
the default limits with custom ones. Currently, to do this from the command line,
you can either specify each limit that you want to override separately using the
``-L`` or ``--limit`` options, or you can specify a JSON file at either a local path
or an S3 URL using the ``--limit-override-json`` option (the
:py:meth:`~.AwsLimitChecker.set_limit_overrides` Python method accepts a dict for
easy bulk overrides of limits). Limits for the ``-L`` / ``--limit`` option are
specified in a ``service_name/limit_name=value`` format, and must be quoted if
the limit name contains spaces.

For example, to override the limits of EC2's "EC2-Classic Elastic IPs" and
"EC2-VPC Elastic IPs" from their defaults of 5, to 10 and 20, respestively:

{limit_overrides}

This example simply sets the overrides, and then prints the limits for confirmation.

You could also set the same limit overrides using a JSON file stored at ``limit_overrides.json``, following the format documented for :py:meth:`awslimitchecker.checker.AwsLimitChecker.set_limit_overrides`:

.. code-block:: json

{limit-override-json}

Using a command like:

.. code-block:: console

   (venv)$ awslimitchecker --limit-override-json=limit_overrides.json -l
{limit_overrides-output-only}

Check Limits Against Thresholds
+++++++++++++++++++++++++++++++

The default mode of operation for ``awslimitchecker`` (when no other action-specific
options are specified) is to check the usage of all known limits, compare them against
the configured limit values, and then output a message and set an exit code depending
on thresholds. The limit values used will be (in order of precedence) explicitly-set
overrides, Trusted Advisor data, and hard-coded defaults.

Currently, the ``awslimitchecker`` command line script only supports global warning and
critical thresholds, which default to 80% and 99% respectively. If any limit's usage is
greater than or equal to 80% of its limit value, this will be included in the output
and the program will exit with return code 1. If any limit's usage is greater than or
equal to 99%, it will include that in the output and exit 2. When determining exit codes,
critical takes priority over warning. The output will include the specifics of which limits
exceeded the threshold, and for limits that are per-resource, the resource IDs.

The Python class allows setting thresholds per-limit as either a percentage, or an integer
usage value, or both; this functionality is not currently present in the command line wrapper.

To check all limits against their thresholds (in this example, one limit has crossed the warning
threshold only, and another has crossed the critical threshold):

.. code-block:: console

   (venv)$ awslimitchecker --no-color
   CloudFormation/Stacks                                  (limit 4000) WARNING: 3396
   DynamoDB/Local Secondary Indexes                       (limit 5) CRITICAL: some_app_name (...)
   DynamoDB/Tables Per Region                             (limit 256) CRITICAL: 554
   EBS/Active snapshots                                   (limit 40000.0) WARNING: 33387
   EC2/Rules per VPC security group                       (limit 50) CRITICAL: sg-aaaaaaaa=50, sg-bbbb (...)
   (...)
   VPC/Entries per route table                            (limit 50) WARNING: rtb-aaaaaaaa=43, rtb-bbbb (...)
   VPC/NAT Gateways per AZ                                (limit 5) CRITICAL: us-east-1d=5, us-east-1c= (...)
   VPC/Virtual private gateways                           (limit 5) WARNING: 4

.. _cli_usage.threshold_overrides:

Set Custom Thresholds
+++++++++++++++++++++

To set the warning threshold of 50% and a critical threshold of 75% when checking limits:

.. code-block:: console

   (venv)$ awslimitchecker -W 97 --critical=98 --no-color
   DynamoDB/Local Secondary Indexes                       (limit 5) CRITICAL: some_app_name (...)
   DynamoDB/Tables Per Region                             (limit 256) CRITICAL: 554
   EC2/Rules per VPC security group                       (limit 50) CRITICAL: sg-cccccccc=49, sg-eeeee (...)
   EC2/Security groups per VPC                            (limit 500) CRITICAL: vpc-dddddddd=726, vpc-c (...)
   (...)
   RDS/VPC Security Groups                                (limit 5) CRITICAL: 5
   S3/Buckets                                             (limit 100) CRITICAL: 946
   VPC/NAT Gateways per AZ                                (limit 5) CRITICAL: us-east-1d=5, us-east-1c= (...)

You can also set custom thresholds on a per-limit basis using the
``--threshold-override-json`` CLI option, which accepts the path to a JSON file
(local or an s3:// URL) matching the format described in
:py:meth:`awslimitchecker.checker.AwsLimitChecker.set_threshold_overrides`, for example:

.. code-block:: json

{threshold-override-json}

Using a command like:

.. code-block:: console

   (venv)$ awslimitchecker -W 97 --critical=98 --no-color --threshold-override-json=s3://bucketname/path/overrides.json
   DynamoDB/Local Secondary Indexes                       (limit 5) CRITICAL: some_app_name (...)
   DynamoDB/Tables Per Region                             (limit 256) CRITICAL: 554
   EC2/Rules per VPC security group                       (limit 50) CRITICAL: sg-cccccccc=49, sg-eeeee (...)
   EC2/Security groups per VPC                            (limit 500) CRITICAL: vpc-dddddddd=726, vpc-c (...)
   (...)
   RDS/VPC Security Groups                                (limit 5) CRITICAL: 5
   S3/Buckets                                             (limit 100) CRITICAL: 946
   VPC/NAT Gateways per AZ                                (limit 5) CRITICAL: us-east-1d=5, us-east-1c= (...)

.. _cli_usage.metrics:

Enable Metrics Provider
+++++++++++++++++++++++

awslimitchecker is capable of sending metrics for the overall runtime of checking
thresholds, as well as the current limit values and current usage, to various metrics
stores. The list of metrics providers supported by your version of awslimitchecker
can be seen with the ``--list-metrics-providers`` option:

{list_metrics}

The configuration options required by each metrics provider are specified in the
providers' documentation:

{metrics-providers}

For example, to use the :py:class:`~awslimitchecker.metrics.datadog.Datadog`
metrics provider which requires an ``api_key`` paramater (also accepted as an
environment variable) and an optional ``extra_tags`` parameter:

.. code-block:: console

    (venv)$ awslimitchecker \
        --metrics-provider=Datadog \
        --metrics-config=api_key=123456 \
        --metrics-config=extra_tags=foo,bar,baz:blam

Metrics will be pushed to the provider only when awslimitchecker is done checking
all limits.

.. _cli_usage.alerts:

Enable Alerts Provider
+++++++++++++++++++++++

awslimitchecker is capable of sending alerts for either warning-level threshold
breaches, or critical-level threshold breaches and exceptions checking thresholds,
to various alert providers. The list of alert providers supported by your version
of awslimitchecker can be seen with the ``--list-alert-providers`` option:

{list_alerts}

The configuration options required by each alert provider are specified in the
providers' documentation:

{alert-providers}

For example, to use the :py:class:`~awslimitchecker.alerts.pagerdutyv1.PagerDutyV1`
alert provider which requires a ``critical_service_key`` paramater (also accepted as an
environment variable) and an optional ``account_alias`` parameter:

.. code-block:: console

    (venv)$ awslimitchecker \
        --alert-provider=PagerDutyV1 \
        --alert-config=critical_service_key=012345 \
        --alert-config=account_alias=myacct

Alerts will be pushed to the provider only when awslimitchecker is done checking
all limits, or when an exception is encountered during the checking process.

Required IAM Policy
+++++++++++++++++++

``awslimitchecker`` can also provide the user with an IAM Policy listing the minimum
permissions for it to perform all limit checks. This can be viewed with the
``--iam-policy`` option:

{iam_policy}

For the current IAM Policy required by this version of awslimitchecker,
see :ref:`IAM Policy <iam_policy>`.

.. important::
   The required IAM policy output by awslimitchecker includes only the permissions required to check limits and usage. If you are loading :ref:`limit overrides <cli_usage.limit_overrides>` and/or :ref:`threshold overrides <cli_usage.threshold_overrides>` from S3, you will need to run awslimitchecker with additional permissions to access those objects.

Connect to a Specific Region
++++++++++++++++++++++++++++

To connect to a specific region (i.e. ``us-west-2``), simply specify the region
name with the ``-r`` or ``--region`` options:

.. code-block:: console

   (venv)$ awslimitchecker -r us-west-2

Assume a Role in Another Account with STS
+++++++++++++++++++++++++++++++++++++++++

To assume the "foobar" role in account 123456789012 in region us-west-1,
specify the ``-r`` / ``--region`` option as well as the ``-A`` / ``--sts-account-id``
and ``-R`` / ``--sts-account-role`` options:

.. code-block:: console

   (venv)$ awslimitchecker -r us-west-1 -A 123456789012 -R foobar

If you also need to specify an ``external_id`` of "myid", you can do that with the
``-E`` / ``--external-id`` options:

.. code-block:: console

   (venv)$ awslimitchecker -r us-west-1 -A 123456789012 -R foobar -E myid

Please note that this assumes that you already have STS configured and working
between your account and the 123456789012 destination account; see the
`documentation <http://docs.aws.amazon.com/STS/latest/APIReference/Welcome.html>`_ for further information.

.. _cli_usage.partitions:

Partitions and Trusted Advisor Regions
++++++++++++++++++++++++++++++++++++++

.. attention::
   Trusted Advisor support in awslimitchecker is deprecated outside of the China and GovCloud regions, and now defaults to disabled/skipped in standard AWS, as the information available from TA can now be retrieved faster and more accurately via other means. See :ref:`changelog.10_0_0` for further information.

awslimitchecker currently supports operating against non-standard `partitions <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`_, such as GovCloud and AWS China (Beijing). Partition names, as seen in the ``partition`` field of ARNs, can be specified with the ``--role-partition`` option to awslimitchecker, like ``--role-partition=aws-cn`` for the China (Beijing) partition. Similarly, the region name to use for the ``support`` API for Trusted Advisor can be specified with the ``--ta-api-region`` option, like ``--ta-api-region=us-gov-west-1``.

.. _cli_usage.throttling:

Handling Throttling and Rate Limiting
+++++++++++++++++++++++++++++++++++++

In some very large and busy AWS accounts, from time to time awslimitchecker might die on unhandled ``Throttling`` or ``RateExceeded`` exceptions. botocore, the underlying low-level AWS API client library that we use, automatically catches these exceptions and retries them up to a per-AWS-API default number of times (generally four for most APIs) with an exponential backoff. In very busy accounts, it may be desirable to increase the default number of retries.

This can be accomplished on a per-API basis (where the API name is the ``service_name`` that would be sent to :py:meth:`boto3.session.Session.client` and is set as the :py:attr:`~.awslimitchecker.services.base._AwsService.api_name` attribute on each :py:class:`~.awslimitchecker.services.base._AwsService` subclass) by setting an environment variable ``BOTO_MAX_RETRIES_<api_name>`` to the maximum number of attempts you'd like for that service.

For example, if you have issues with rate limiting of the ``cloudformation:DescribeStacks`` still failing after the default of four attempts, and you'd like to use ten (10) attempts instead, you could ``export BOTO_MAX_RETRIES_cloudformation=10`` before running ``awslimitchecker``.
