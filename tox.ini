[tox]
envlist = {py26,py27,py32,py33,py34,py35,pypy,pypy3}-{unit,versioncheck}, docs, localdocs, integration, integration3

[testenv]
deps =
  cov-core
  coverage==3.7.1
  execnet
  pep8
  py
  pytest>=2.8.3
  pytest-cache
  pytest-cov
  pytest-pep8
  pytest-flakes
  mock
  freezegun
  boto3==1.2.3
  pytest-blockage
  virtualenv
  onetimepass==1.0.1
  testfixtures

passenv=TRAVIS*
setenv =
    TOXINIDIR={toxinidir}
    TOXDISTDIR={distdir}
    # when we call ``awslimitchecker.tests.services.result_fixtures.get_boto3_resource_model()``
    # botocore.session.Session will attempt HTTP requests to 169.254.169.254 to
    # retrieve Instance Metadata and IAM roles. In order to prevent this,
    # we simply export bogus AWS keys.
    AWS_ACCESS_KEY_ID=MightAsWellNotHaveThisVarSetHere
    AWS_SECRET_ACCESS_KEY=MightAsWellNotHaveThisVarSetHere
    AWS_DEFAULT_REGION=us-east-1
    AWS_MAIN_ACCESS_KEY_ID=MightAsWellNotHaveThisVarSetHere
    AWS_MAIN_SECRET_ACCESS_KEY=MightAsWellNotHaveThisVarSetHere
    AWS_MASTER_ACCOUNT_ID=MightAsWellNotHaveThisVarSetHere
    AWS_EXTERNAL_ID=MightAsWellNotHaveThisVarSetHere
    AWS_INTEGRATION_ACCESS_KEY_ID=MightAsWellNotHaveThisVarSetHere
    AWS_INTEGRATION_SECRET_KEY=MightAsWellNotHaveThisVarSetHere
    AWS_MFA_EXTERNAL_ID=MightAsWellNotHaveThisVarSetHere
    AWS_MFA_INTEGRATION_ACCESS_KEY_ID=MightAsWellNotHaveThisVarSetHere
    AWS_MFA_INTEGRATION_SECRET_KEY=MightAsWellNotHaveThisVarSetHere
    AWS_MFA_SERIAL=MightAsWellNotHaveThisVarSetHere
    AWS_MFA_SECRET=MightAsWellNotHaveThisVarSetHere

sitepackages = False
whitelist_externals = env test
commands =
    python --version
    virtualenv --version
    pip --version
    pip freeze
    unit: py.test -rxs -vv --durations=10 --pep8 --flakes --blockage -m "not (versioncheck or integration)" --cov-report term-missing --cov-report xml --cov-report html --cov-config {toxinidir}/.coveragerc --cov=awslimitchecker {posargs} awslimitchecker
    versioncheck: py.test -rxs -vv -s --durations=10 --pep8 --flakes --blockage -m "versioncheck" {posargs} awslimitchecker

# always recreate the venv
recreate = True

# mock >= 1.1.0 no longer works with py26
# the only difference between this and 'testenv' is the mock requirement version
[testenv:py26]
deps =
  cov-core
  coverage==3.7.1
  execnet
  pep8
  py
  pytest>=2.8.3
  pytest-cache
  pytest-cov
  pytest-pep8
  pytest-flakes
  # mock >= 1.1.0 no longer works with py26
  mock==1.0.1
  freezegun
  pytest-blockage
  boto3==1.2.3
  virtualenv
  onetimepass==1.0.1
  testfixtures

passenv=TRAVIS*
setenv =
    TOXINIDIR={toxinidir}
    TOXDISTDIR={distdir}
    # when we call ``awslimitchecker.tests.services.result_fixtures.get_boto3_resource_model()``
    # botocore.session.Session will attempt HTTP requests to 169.254.169.254 to
    # retrieve Instance Metadata and IAM roles. In order to prevent this,
    # we simply export bogus AWS keys.
    AWS_ACCESS_KEY_ID=MightAsWellNotHaveThisVarSetHere
    AWS_SECRET_ACCESS_KEY=MightAsWellNotHaveThisVarSetHere
    AWS_DEFAULT_REGION=us-east-1
    AWS_MAIN_ACCESS_KEY_ID=MightAsWellNotHaveThisVarSetHere
    AWS_MAIN_SECRET_ACCESS_KEY=MightAsWellNotHaveThisVarSetHere
    AWS_MASTER_ACCOUNT_ID=MightAsWellNotHaveThisVarSetHere
    AWS_EXTERNAL_ID=MightAsWellNotHaveThisVarSetHere
    AWS_INTEGRATION_ACCESS_KEY_ID=MightAsWellNotHaveThisVarSetHere
    AWS_INTEGRATION_SECRET_KEY=MightAsWellNotHaveThisVarSetHere
    AWS_MFA_EXTERNAL_ID=MightAsWellNotHaveThisVarSetHere
    AWS_MFA_INTEGRATION_ACCESS_KEY_ID=MightAsWellNotHaveThisVarSetHere
    AWS_MFA_INTEGRATION_SECRET_KEY=MightAsWellNotHaveThisVarSetHere
    AWS_MFA_SERIAL=MightAsWellNotHaveThisVarSetHere
    AWS_MFA_SECRET=MightAsWellNotHaveThisVarSetHere

sitepackages = False
whitelist_externals = env test
commands =
    python --version
    virtualenv --version
    pip --version
    pip freeze
    unit: py.test -rxs -vv --durations=10 --pep8 --flakes --blockage -m "not (versioncheck or integration)" {posargs} awslimitchecker
    versioncheck: py.test -rxs -vv -s --durations=10 --pep8 --flakes --blockage -m "versioncheck" {posargs} awslimitchecker

# always recreate the venv
recreate = True

[testenv:py32-versioncheck]
deps =
  cov-core
  coverage==3.7.1
  execnet
  pep8
  py
  pytest>=2.8.3
  pytest-cache
  pytest-cov
  pytest-pep8
  pytest-flakes
  mock
  freezegun
  boto3==1.2.3
  pytest-blockage
  virtualenv==13.1.2
  onetimepass==1.0.1
  testfixtures

passenv=TRAVIS*
setenv =
    TOXINIDIR={toxinidir}
    TOXDISTDIR={distdir}
    # when we call ``awslimitchecker.tests.services.result_fixtures.get_boto3_resource_model()``
    # botocore.session.Session will attempt HTTP requests to 169.254.169.254 to
    # retrieve Instance Metadata and IAM roles. In order to prevent this,
    # we simply export bogus AWS keys.
    AWS_ACCESS_KEY_ID=MightAsWellNotHaveThisVarSetHere
    AWS_SECRET_ACCESS_KEY=MightAsWellNotHaveThisVarSetHere
    AWS_DEFAULT_REGION=us-east-1
    AWS_MAIN_ACCESS_KEY_ID=MightAsWellNotHaveThisVarSetHere
    AWS_MAIN_SECRET_ACCESS_KEY=MightAsWellNotHaveThisVarSetHere
    AWS_MASTER_ACCOUNT_ID=MightAsWellNotHaveThisVarSetHere
    AWS_EXTERNAL_ID=MightAsWellNotHaveThisVarSetHere
    AWS_INTEGRATION_ACCESS_KEY_ID=MightAsWellNotHaveThisVarSetHere
    AWS_INTEGRATION_SECRET_KEY=MightAsWellNotHaveThisVarSetHere
    AWS_MFA_EXTERNAL_ID=MightAsWellNotHaveThisVarSetHere
    AWS_MFA_INTEGRATION_ACCESS_KEY_ID=MightAsWellNotHaveThisVarSetHere
    AWS_MFA_INTEGRATION_SECRET_KEY=MightAsWellNotHaveThisVarSetHere
    AWS_MFA_SERIAL=MightAsWellNotHaveThisVarSetHere
    AWS_MFA_SECRET=MightAsWellNotHaveThisVarSetHere

sitepackages = False
whitelist_externals = env test
commands =
    python --version
    virtualenv --version
    pip --version
    pip freeze
    unit: py.test -rxs -vv --durations=10 --pep8 --flakes --blockage -m "not (versioncheck or integration)" --cov-report term-missing --cov-report xml --cov-report html --cov-config {toxinidir}/.coveragerc --cov=awslimitchecker {posargs} awslimitchecker
    versioncheck: py.test -rxs -vv -s --durations=10 --pep8 --flakes --blockage -m "versioncheck" {posargs} awslimitchecker

# always recreate the venv
recreate = True

[testenv:docs]
# this really just makes sure README.rst will parse on pypi
passenv = TRAVIS* CONTINUOUS_INTEGRATION AWS* READTHEDOCS*
setenv =
    TOXINIDIR={toxinidir}
    TOXDISTDIR={distdir}
    CI=true
    # when we call ``awslimitchecker.tests.services.result_fixtures.get_boto3_resource_model()``
    # botocore.session.Session will attempt HTTP requests to 169.254.169.254 to
    # retrieve Instance Metadata and IAM roles. In order to prevent this,
    # we simply export bogus AWS keys.
    AWS_ACCESS_KEY_ID=MightAsWellNotHaveThisVarSetHere
    AWS_SECRET_ACCESS_KEY=MightAsWellNotHaveThisVarSetHere
    AWS_DEFAULT_REGION=us-east-1
    AWS_MAIN_ACCESS_KEY_ID=MightAsWellNotHaveThisVarSetHere
    AWS_MAIN_SECRET_ACCESS_KEY=MightAsWellNotHaveThisVarSetHere
    AWS_MASTER_ACCOUNT_ID=MightAsWellNotHaveThisVarSetHere
    AWS_EXTERNAL_ID=MightAsWellNotHaveThisVarSetHere
    AWS_INTEGRATION_ACCESS_KEY_ID=MightAsWellNotHaveThisVarSetHere
    AWS_INTEGRATION_SECRET_KEY=MightAsWellNotHaveThisVarSetHere
    AWS_MFA_EXTERNAL_ID=MightAsWellNotHaveThisVarSetHere
    AWS_MFA_INTEGRATION_ACCESS_KEY_ID=MightAsWellNotHaveThisVarSetHere
    AWS_MFA_INTEGRATION_SECRET_KEY=MightAsWellNotHaveThisVarSetHere
    AWS_MFA_SERIAL=MightAsWellNotHaveThisVarSetHere
    AWS_MFA_SECRET=MightAsWellNotHaveThisVarSetHere

deps =
  docutils
  pygments
  sphinx
  sphinx_rtd_theme
  onetimepass==1.0.1
basepython = python2.7
commands =
    python --version
    virtualenv --version
    pip --version
    pip freeze
    rst2html.py --halt=2 README.rst /dev/null
    sphinx-apidoc awslimitchecker awslimitchecker/tests -o {toxinidir}/docs/source -e -f -M
    # link check
    # -n runs in nit-picky mode
    # -W turns warnings into errors
    sphinx-build -a -n -W -b linkcheck {toxinidir}/docs/source {toxinidir}/docs/build/html
    # build
    sphinx-build -a -n -W -b html {toxinidir}/docs/source {toxinidir}/docs/build/html

[testenv:localdocs]
# this really just makes sure README.rst will parse on pypi
passenv = AWS*
setenv =
    TOXINIDIR={toxinidir}
    TOXDISTDIR={distdir}

deps =
  docutils
  pygments
  sphinx
  sphinx_rtd_theme
  onetimepass==1.0.1
basepython = python2.7
commands =
    python --version
    virtualenv --version
    pip --version
    pip freeze
    rst2html.py --halt=2 README.rst /dev/null
    sphinx-apidoc awslimitchecker awslimitchecker/tests -o {toxinidir}/docs/source -e -f -M
    python {toxinidir}/docs/build_generated_docs.py
    # link check
    # -n runs in nit-picky mode
    # -W turns warnings into errors
    sphinx-build -a -n -W -b linkcheck {toxinidir}/docs/source {toxinidir}/docs/build/html
    # build
    sphinx-build -a -n -W -b html {toxinidir}/docs/source {toxinidir}/docs/build/html

[testenv:integration]
deps =
  execnet
  py
  pytest>=2.8.3
  pytest-cache
  mock
  boto3==1.2.3
  onetimepass==1.0.1
  testfixtures
passenv = CI TRAVIS* CONTINUOUS_INTEGRATION AWS*
setenv =
    TOXINIDIR={toxinidir}
    TOXDISTDIR={distdir}
basepython = python2.7
sitepackages = False
whitelist_externals = env test
commands =
    python --version
    virtualenv --version
    pip --version
    pip freeze
    py.test -rxs -vv --durations=10 -m "integration" {posargs} awslimitchecker

[testenv:integration3]
deps =
  execnet
  py
  pytest>=2.8.3
  pytest-cache
  mock
  boto3==1.2.3
  onetimepass==1.0.1
  testfixtures
passenv = CI TRAVIS* CONTINUOUS_INTEGRATION AWS*
setenv =
    TOXINIDIR={toxinidir}
    TOXDISTDIR={distdir}
basepython = python3.4
sitepackages = False
whitelist_externals = env test
commands =
    python --version
    virtualenv --version
    pip --version
    pip freeze
    py.test -rxs -vv --durations=10 -m "integration" {posargs} awslimitchecker
